#!/bin/bash
###########################################################
# Sets the interface configuration
###########################################################
# Implemented only for:
#  - Raspbian
# Tested on:
#  - Raspbian
###########################################################
# Details:
# the name of the interface is required
# if is DHCP, no other argument is required
# if STATIC, IP address is required and netmask will be 255.255.255.0 if not provided
###########################################################
###########################################################
function cleanup() {
  if [ -e "$DHCPCD_CONF_TMP_FILE" ]; then
    rm $DHCPCD_CONF_TMP_FILE
  fi
  if [ -e "$INTERFACES_CONF_TMP_FILE" ]; then
    rm $INTERFACES_CONF_TMP_FILE
  fi
}
function help() {
  echo "Sets the configuration of the network interface."
  echo "Syntax: set_interface [-h|n|t|m|g|a]"
  echo "options:"
  echo "h     Print this Help."
  echo "i     Pass the name of the interface."
  echo "t     Pass the type STATIC or DHCP (Default is DHCP)."
  echo "m     Pass the network mask in decimal (default is: 255.255.255.0)."
  echo "a     Pass the IPv4 address."
  echo "g     Pass the IPv4 address of the gateway."
  echo
}
function validate_ip() {
  local ip=$1
  local r=1
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    if [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]; then
      r=0
    fi
  fi
  return $r
}
function write_raspberry_interface() {
  if [ $IFACE_WRITTEN == 0 ]; then
    APPEND=0
    IFACE_WRITTEN=1
    if [ "$TYPE" == "STATIC" ] || [ "$TYPE" == "static" ]; then
      echo "interface $NAME" >> $DHCPCD_CONF_TMP_FILE
      echo "static ip_address=$ADDRESS" >> $DHCPCD_CONF_TMP_FILE
      if [ -z "$NETMASK" ]; then
        echo "static subnet-mask=255.255.255.0" >> $DHCPCD_CONF_TMP_FILE
      else
        echo "static subnet-mask=$NETMASK" >> $DHCPCD_CONF_TMP_FILE        
      fi
      if [ ! -z "$GATEWAY" ]; then
        echo "static routers=$GATEWAY" >> $DHCPCD_CONF_TMP_FILE
      fi
      echo >> $DHCPCD_CONF_TMP_FILE
    fi
  fi
}
NAME=''
TYPE='DHCP'
NETMASK='255.255.255.0'
GATEWAY=''
ADDRESS=''
NOW=$(date '+%d/%m/%Y %H:%M:%S');
while getopts ":h:i:t:m:a:g:" option; do
  case $option in
    h) 
      help
      exit
      ;;
    i)
      NAME=$OPTARG
      ;;
    t)
      TYPE=$OPTARG
      ;;
    m)
      NETMASK=$OPTARG
      ;;
    g)
      GATEWAY=$OPTARG
      ;;
    a)
      ADDRESS=$OPTARG
      ;;
    \?) # Invalid option
      echo "Error: Invalid option"
      exit
      ;;
  esac
done
if [ ! -z "$ADDRESS" ]; then
  TYPE='STATIC'
fi
if [ -z "$NAME" ] || [ -z "$TYPE" ]; then
  help
  echo "Interface name and type are requied."
  exit 1
fi
if [ "$TYPE" == "STATIC" ] || [ "$TYPE" == "static" ]; then
  if validate_ip $ADDRESS; then
    echo "Using address: $ADDRESS"
  else
    help
    echo "Interface address (IPv4) is requied for static configuration."
    exit 1
  fi
  if [ ! -z "$NETMASK" ]; then
    if validate_ip $NETMASK; then
      echo "Using netmask: $NETMASK"
    else
      help
      echo "Interface netmask is not valid for static configuration."
      exit 1
    fi
  fi
  if [ ! -z "$GATEWAY" ]; then
    if validate_ip $GATEWAY; then
      echo "Using gateway: $GATEWAY"
    else
      help
      echo "Interface gateway is not valid for static configuration."
      exit 1
    fi
  fi
fi
IFACE_WRITTEN=0
IFACE_BLOCK=0
###########################################################
# Raspberry
###########################################################
SYSTEM=$(uname -a)
trap cleanup SIGINT SIGTERM ERR EXIT
if [[ $SYSTEM == *"raspberry"* ]] || [[ $SYSTEM == *"smartbox"* ]]; then
  # Reset default dhcpcd.conf file, maybe it can be improved by filtering the existing file to remove only the configuration of the given interface and
  # keep the configuration of the wlan interface
  DHCPCD_CONF_FILE=/etc/dhcpcd.conf
  DHCPCD_CONF_TMP_FILE=/tmp/dhcpcd.conf.tmp
  if [ -e "$DHCPCD_CONF_TMP_FILE" ]; then
    rm "$DHCPCD_CONF_TMP_FILE"
  fi
  if [ -f "$DHCPCD_CONF_FILE" ]; then
    echo "# Generated by com.focussia.util.net." > $DHCPCD_CONF_TMP_FILE
    echo "# Date: $NOW" >> $DHCPCD_CONF_TMP_FILE    
    while IFS= read -r line
    do
      if [ $IFACE_BLOCK == 0 ]; then
        APPEND=1
      else
        if [[ -z ${line%%*( )} ]]; then
          echo "$line" >> $DHCPCD_CONF_TMP_FILE
        fi
        if [[ "$line" == "interface"* ]] || [[ -z ${line%%*( )} ]]; then
          APPEND=1
          IFACE_BLOCK=0
        fi
      fi
      if [[ "$line" == "# Generated"* ]] || [[ "$line" == "#Generated"* ]] || [[ "$line" == "# Date:"* ]]; then
        APPEND=0
      else
        if [[ "$line" == "interface $NAME"* ]]; then
          write_raspberry_interface
          IFACE_BLOCK=1
        fi
      fi
      if [ $APPEND == 1 ]; then
        echo "$line" >> $DHCPCD_CONF_TMP_FILE
      fi
    done < "$DHCPCD_CONF_FILE"
    write_raspberry_interface
  else
    cat <<EOT > $DHCPCD_CONF_TMP_FILE
# Generated by com.focussia.util.net. 
# Date: $NOW
# A sample configuration for dhcpcd.
# See dhcpcd.conf(5) for details.

# Inform the DHCP server of our hostname for DDNS.
hostname
# Use the hardware address of the interface for the Client ID.
clientid
# Persist interface configuration when dhcpcd exits.
persistent
# Rapid commit support.
# Safe to enable by default because it requires the equivalent option set
# on the server to actually work.
option rapid_commit
# A list of options to request from the DHCP server.
option domain_name_servers, domain_name, domain_search, host_name
option classless_static_routes
# Respect the network MTU. This is applied to DHCP routes.
option interface_mtu
# Most distributions have NTP support.
#option ntp_servers
# A ServerID is required by RFC2131.
require dhcp_server_identifier
# Generate SLAAC address using the Hardware Address of the interface
#slaac hwaddr
# OR generate Stable Private IPv6 Addresses based from the DUID
slaac private

EOT
    write_raspberry_interface
  fi
  if [ -e "$DHCPCD_CONF_FILE.bak" ]; then
    rm "$DHCPCD_CONF_FILE.bak"
  fi
  if [ -e "$DHCPCD_CONF_FILE" ]; then
    mv $DHCPCD_CONF_FILE "$DHCPCD_CONF_FILE.bak"
  fi
  mv $DHCPCD_CONF_TMP_FILE $DHCPCD_CONF_FILE
  chmod 644 $DHCPCD_CONF_FILE
  chown root.root $DHCPCD_CONF_FILE
  # Reset the interfaces main configuration file to use only the files in the 'interfaces.d' directory
  INTERFACES_CONF_FILE=/etc/network/interfaces
  INTERFACES_CONF_TMP_FILE=/tmp/interfaces.tmp
  INTERFACES_DIR=/etc/network/interfaces.d
  BAK_INTERFACES_DIR=/etc/network/interfaces.d.bak
  if [ -d "$INTERFACES_DIR" ]; then
    if [ ! -d "$BAK_INTERFACES_DIR" ]; then
      mkdir "$BAK_INTERFACES_DIR"
    fi
    if [ -e "$BAK_INTERFACES_DIR/$NAME.bak" ]; then
      rm "$BAK_INTERFACES_DIR/$NAME.bak"
    fi
    mv "$INTERFACES_DIR/*" "$BAK_INTERFACES_DIR" >/dev/null 2>&1
  fi
  if [ -f "$INTERFACES_CONF_FILE" ]; then
    if [ -e "$INTERFACES_CONF_TMP_FILE" ]; then
      rm "$INTERFACES_CONF_TMP_FILE"
    fi 
    cat <<EOT > $INTERFACES_CONF_TMP_FILE
# Generated by com.focussia.util.net. 
# Date: $NOW
# interfaces(5) file used by ifup(8) and ifdown(8)

# Please note that this file is written to be used with dhcpcd
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'

# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d
EOT
    if [ -e "$INTERFACES_CONF_FILE.bak" ]; then
      rm "$INTERFACES_CONF_FILE.bak"
    fi
    if [ -e "$INTERFACES_CONF_FILE" ]; then
      mv $INTERFACES_CONF_FILE "$INTERFACES_CONF_FILE.bak"
    fi
    mv $INTERFACES_CONF_TMP_FILE $INTERFACES_CONF_FILE
    chmod 644 $INTERFACES_CONF_FILE
    chown root.root $INTERFACES_CONF_FILE
  fi
else
  >&2 echo "System is not supported yet: $SYSTEM"
  exit 1
fi
exit 0
